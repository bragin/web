using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Windows.Forms;

/*

Overview:
    CsQuery is used to parse HTML content (TODO: Convert to HtmlParser use only)
    UNUSED: ExCSS, AngleSharp code just for reference as CSS parsers
    HtmlContent.LoadDocument() - main invocation of HTML layout and
                                 rendered are there
    HtmlContent.GetDimensions() - hardcoded window size

    BoxTree - lots of unimplemented unmarked stuff

    CSS call chain:
    class BoxTree
    \/  BoxGetStyle() - stub
    \/  nscssGetStyle() - stub
    \/  CssSelectStyle() - currently implementing
 

    Example of function pointers array: CssParser.ParseFunc

    Now working on: class CssProps, implementing initial properties dispatcher
    for various needed props

Autogenerated code:
    Some code is autogenerated, just like in NetSurf. The code generator
    code is located in CodeGeneratos.cs. You have to call it 

Useful links:
    All possible array init syntices:
        https://stackoverflow.com/questions/5678216/all-possible-array-initialization-syntaxes
 */


namespace SkiaSharpOpenGLBenchmark
{
    internal static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            // Set the DPI Awareness to Per-Monitor
            if (Environment.OSVersion.Platform == PlatformID.Win32NT)
            {
                SetProcessDpiAwarenessContext(DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2);
            }

            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new Form1());
        }

        [System.Runtime.InteropServices.DllImport("user32.dll")]
        private static extern bool SetProcessDpiAwarenessContext(int value);

        private const int DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2 = -4;

        [MethodImpl(MethodImplOptions.NoInlining)]
        public static string GetCurrentMethod()
        {
            var st = new StackTrace();
            var sf = st.GetFrame(1);

            return sf.GetMethod().Name;
        }
    }
}
